1. Big O is a language and methods to describe how long does it take the system to execute the code. Big O does look at efficiency of algorythm on a bigger scale.

2.  1.Constant Time Complexity.Constant Time Complexity is ideal scenario even though hardly ever archievebla in real production world. In this scenario the given code is perfectly scalable what means adding data or any load to the code will never affect the runtime.

    2. Logarythmic Time Complexity. It is second best scenario. In this scenario it requires more time to perform the code at the beginning but while data increases we need less time to execute the code. In this case scenario we do not iterate through ech step of the code what saves us a lot of time on a bigger scale.

3.Linear Time Complexity. This is scenario where to execute the code the system iterates one item at atime. A very clear example of it can be any simple for, while loops, methods : for each, find

4.Quadratic Time Complexity. This is one of the worst scenarios. This happens when we multiply iterations to execute a particular code. Good example of that is nested loops.

5. Factorial Time Complexity. It is the worst scenario. We get this time complexity when we try to perform relatively easy task by excrusiationg amount of code. Rarely met in real world. These is when we at the beginning have several starting points in the code that will require even more time to excute once they go all diffrent ways to come to the end result. Any code expessing factorial mathematically would be an example of factorial Time Complexity.




